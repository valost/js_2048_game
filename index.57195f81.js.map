{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.getRandomCells();\n        this.getRandomCells();\n    }\n    getRandomCells() {\n        const emptyCells = [];\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (this.state[r][c] === 0) emptyCells.push([\n                r,\n                c\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [randomR, randomC] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[randomR][randomC] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameStatus() {\n        let canMove = false;\n        let hasEmptyCells = false;\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.state[r][c] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n                return;\n            }\n            if (this.state[r][c] === 0) hasEmptyCells = true;\n            if (r < 3 && this.state[r][c] === this.state[r + 1][c] || c < 3 && this.state[r][c] === this.state[r][c + 1]) canMove = true;\n        }\n        if (!canMove && !hasEmptyCells) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n    moveLeft() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.playing) {\n            let canMove = false;\n            for(let r = 0; r < 4; r++){\n                const values = [];\n                for(let c = 0; c < 4; c++)if (this.state[r][c] !== 0) values.push(this.state[r][c]);\n                for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n                    values[i] *= 2;\n                    values[i + 1] = 0;\n                    this.score += values[i];\n                    canMove = true;\n                }\n                const updatedRow = values.filter((value)=>value !== 0);\n                while(updatedRow.length < 4)updatedRow.push(0);\n                for(let c = 0; c < 4; c++)if (this.state[r][c] !== updatedRow[c]) {\n                    this.state[r][c] = updatedRow[c];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCells();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveRight() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.playing) {\n            let canMove = false;\n            for(let r = 0; r < 4; r++){\n                const values = [];\n                for(let c = 3; c >= 0; c--)if (this.state[r][c] !== 0) values.push(this.state[r][c]);\n                for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n                    values[i] *= 2;\n                    values[i + 1] = 0;\n                    this.score += values[i];\n                    canMove = true;\n                }\n                const updatedRow = values.filter((value)=>value !== 0);\n                while(updatedRow.length < 4)updatedRow.push(0);\n                for(let c = 0; c < 4; c++)if (this.state[r][c] !== updatedRow[3 - c]) {\n                    this.state[r][c] = updatedRow[3 - c];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCells();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveUp() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.playing) {\n            let canMove = false;\n            for(let c = 0; c < 4; c++){\n                const values = [];\n                for(let r = 0; r < 4; r++)if (this.state[r][c] !== 0) values.push(this.state[r][c]);\n                for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n                    values[i] *= 2;\n                    values[i + 1] = 0;\n                    this.score += values[i];\n                    canMove = true;\n                }\n                const updatedColumn = values.filter((value)=>value !== 0);\n                while(updatedColumn.length < 4)updatedColumn.push(0);\n                for(let r = 0; r < 4; r++)if (this.state[r][c] !== updatedColumn[r]) {\n                    this.state[r][c] = updatedColumn[r];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCells();\n                this.checkGameStatus();\n            }\n        }\n    }\n    moveDown() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS.playing) {\n            let canMove = false;\n            for(let c = 0; c < 4; c++){\n                const values = [];\n                for(let r = 3; r >= 0; r--)if (this.state[r][c] !== 0) values.push(this.state[r][c]);\n                for(let i = 0; i < values.length; i++)if (values[i] === values[i + 1]) {\n                    values[i] *= 2;\n                    values[i + 1] = 0;\n                    this.score += values[i];\n                    canMove = true;\n                }\n                const updatedColumn = values.filter((value)=>value !== 0);\n                while(updatedColumn.length < 4)updatedColumn.push(0);\n                for(let r = 0; r < 4; r++)if (this.state[r][c] !== updatedColumn[3 - r]) {\n                    this.state[r][c] = updatedColumn[3 - r];\n                    canMove = true;\n                }\n            }\n            if (canMove) {\n                this.getRandomCells();\n                this.checkGameStatus();\n            }\n        }\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$manageGameField();\n    $09e991522ca7e64e$var$manageGameScore();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    switch(e.key){\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$manageGameField();\n    $09e991522ca7e64e$var$manageGameScore();\n    $09e991522ca7e64e$var$manageMessages();\n});\nfunction $09e991522ca7e64e$var$manageGameField() {\n    $09e991522ca7e64e$var$gameField.innerHTML = \"\";\n    const currState = $09e991522ca7e64e$var$game.getState();\n    for(let r = 0; r < 4; r++){\n        const tr = document.createElement(\"tr\");\n        for(let c = 0; c < 4; c++){\n            const td = document.createElement(\"td\");\n            const value = currState[r][c];\n            td.textContent = value !== 0 ? value : \"\";\n            td.classList.add(\"field-cell\");\n            if (value !== 0) td.classList.add(`field-cell--${value}`);\n            tr.appendChild(td);\n        }\n        $09e991522ca7e64e$var$gameField.appendChild(tr);\n    }\n}\nfunction $09e991522ca7e64e$var$manageGameScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$manageMessages() {\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.win) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.lose) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$manageGameField();\n$09e991522ca7e64e$var$manageGameScore();\n$09e991522ca7e64e$var$manageMessages();\n\n\n//# sourceMappingURL=index.57195f81.js.map\n","'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst button = document.querySelector('.start');\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  } else if (button.classList.contains('restart')) {\n    game.restart();\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  }\n\n  manageGameField();\n  manageGameScore();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  switch (e.key) {\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  manageGameField();\n  manageGameScore();\n  manageMessages();\n});\n\nfunction manageGameField() {\n  gameField.innerHTML = '';\n\n  const currState = game.getState();\n\n  for (let r = 0; r < 4; r++) {\n    const tr = document.createElement('tr');\n\n    for (let c = 0; c < 4; c++) {\n      const td = document.createElement('td');\n      const value = currState[r][c];\n\n      td.textContent = value !== 0 ? value : '';\n      td.classList.add('field-cell');\n\n      if (value !== 0) {\n        td.classList.add(`field-cell--${value}`);\n      }\n\n      tr.appendChild(td);\n    }\n\n    gameField.appendChild(tr);\n  }\n}\n\nfunction manageGameScore() {\n  gameScore.textContent = game.getScore();\n}\n\nfunction manageMessages() {\n  if (game.getStatus() === Game.STATUS.win) {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === Game.STATUS.lose) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nmanageGameField();\nmanageGameScore();\nmanageMessages();\n","'use strict';\n\nclass Game {\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.STATUS.idle;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  start() {\n    this.status = Game.STATUS.playing;\n    this.getRandomCells();\n    this.getRandomCells();\n  }\n\n  getRandomCells() {\n    const emptyCells = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [randomR, randomC] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomR][randomC] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameStatus() {\n    let canMove = false;\n    let hasEmptyCells = false;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 2048) {\n          this.status = Game.STATUS.win;\n\n          return;\n        }\n\n        if (this.state[r][c] === 0) {\n          hasEmptyCells = true;\n        }\n\n        if (\n          (r < 3 && this.state[r][c] === this.state[r + 1][c]) ||\n          (c < 3 && this.state[r][c] === this.state[r][c + 1])\n        ) {\n          canMove = true;\n        }\n      }\n    }\n\n    if (!canMove && !hasEmptyCells) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n\n  moveLeft() {\n    if (this.status === Game.STATUS.playing) {\n      let canMove = false;\n\n      for (let r = 0; r < 4; r++) {\n        const values = [];\n\n        for (let c = 0; c < 4; c++) {\n          if (this.state[r][c] !== 0) {\n            values.push(this.state[r][c]);\n          }\n        }\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            values[i + 1] = 0;\n            this.score += values[i];\n            canMove = true;\n          }\n        }\n\n        const updatedRow = values.filter((value) => value !== 0);\n\n        while (updatedRow.length < 4) {\n          updatedRow.push(0);\n        }\n\n        for (let c = 0; c < 4; c++) {\n          if (this.state[r][c] !== updatedRow[c]) {\n            this.state[r][c] = updatedRow[c];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCells();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === Game.STATUS.playing) {\n      let canMove = false;\n\n      for (let r = 0; r < 4; r++) {\n        const values = [];\n\n        for (let c = 3; c >= 0; c--) {\n          if (this.state[r][c] !== 0) {\n            values.push(this.state[r][c]);\n          }\n        }\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            values[i + 1] = 0;\n            this.score += values[i];\n            canMove = true;\n          }\n        }\n\n        const updatedRow = values.filter((value) => value !== 0);\n\n        while (updatedRow.length < 4) {\n          updatedRow.push(0);\n        }\n\n        for (let c = 0; c < 4; c++) {\n          if (this.state[r][c] !== updatedRow[3 - c]) {\n            this.state[r][c] = updatedRow[3 - c];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCells();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === Game.STATUS.playing) {\n      let canMove = false;\n\n      for (let c = 0; c < 4; c++) {\n        const values = [];\n\n        for (let r = 0; r < 4; r++) {\n          if (this.state[r][c] !== 0) {\n            values.push(this.state[r][c]);\n          }\n        }\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            values[i + 1] = 0;\n            this.score += values[i];\n            canMove = true;\n          }\n        }\n\n        const updatedColumn = values.filter((value) => value !== 0);\n\n        while (updatedColumn.length < 4) {\n          updatedColumn.push(0);\n        }\n\n        for (let r = 0; r < 4; r++) {\n          if (this.state[r][c] !== updatedColumn[r]) {\n            this.state[r][c] = updatedColumn[r];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCells();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === Game.STATUS.playing) {\n      let canMove = false;\n\n      for (let c = 0; c < 4; c++) {\n        const values = [];\n\n        for (let r = 3; r >= 0; r--) {\n          if (this.state[r][c] !== 0) {\n            values.push(this.state[r][c]);\n          }\n        }\n\n        for (let i = 0; i < values.length; i++) {\n          if (values[i] === values[i + 1]) {\n            values[i] *= 2;\n            values[i + 1] = 0;\n            this.score += values[i];\n            canMove = true;\n          }\n        }\n\n        const updatedColumn = values.filter((value) => value !== 0);\n\n        while (updatedColumn.length < 4) {\n          updatedColumn.push(0);\n        }\n\n        for (let r = 0; r < 4; r++) {\n          if (this.state[r][c] !== updatedColumn[3 - r]) {\n            this.state[r][c] = updatedColumn[3 - r];\n            canMove = true;\n          }\n        }\n      }\n\n      if (canMove) {\n        this.getRandomCells();\n        this.checkGameStatus();\n      }\n    }\n  }\n\n  restart() {\n    this.status = Game.STATUS.idle;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","constructor","initialState","status","state","map","row","score","start","getRandomCells","emptyCells","r","c","push","length","randomR","randomC","Math","floor","random","checkGameStatus","canMove","hasEmptyCells","moveLeft","values","i","updatedRow","filter","value","moveRight","moveUp","updatedColumn","moveDown","restart","getScore","getState","getStatus","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$manageGameField","innerHTML","currState","tr","createElement","td","textContent","classList","add","appendChild","$09e991522ca7e64e$var$manageGameScore","$09e991522ca7e64e$var$manageMessages","remove","addEventListener","contains","e","key"],"version":3,"file":"index.57195f81.js.map"}